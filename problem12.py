#Chris Kopacz
#Project Euler
#Problem 12 - Highly divisible triangular number
"""
The sequence of triangle numbers is generated by adding he natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55

Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over 5 divisors.

What is the value of the first triangle number to have over 500 divisors?
"""

import math

def factors(var):
    fax = 0
    root = int(math.sqrt(var))

    for iter in range(1,root+1):
        if var % iter == 0:
            fax += 1

    fax = 2*fax
    if root == math.sqrt(var):
        fax = fax - 1

    return fax


triNum = 1
counter = 1
triFactors = 0

while triFactors <= 500:
    counter += 1
    triNum = triNum + counter

    triFactors = factors(triNum)
    #print(str(triNum) + " " + str(triFactors))

    if triFactors > 500:
        print("# = " + str(triNum))
        print("Fax = " + str(triFactors))
        break


































#end of page space holder
